import React, { useState, useEffect } from 'react';
import {
  Card,
  Tabs,
  Progress,
  Button,
  Row,
  Col,
  Typography,
  Space,
  Avatar,
  Badge,
  Statistic,
  List,
  Tag,
  Modal,
  Input,
  Select,
  Rate,
  Tooltip,
  Divider,
  Alert
} from 'antd';
import {
  BookOutlined,
  SoundOutlined,
  TrophyOutlined,
  FireOutlined,
  ClockCircleOutlined,
  CheckCircleOutlined,
  PlayCircleOutlined,
  PauseCircleOutlined,
  ReloadOutlined,
  StarOutlined,
  HeartOutlined,
  MessageOutlined
} from '@ant-design/icons';
import { motion, AnimatePresence } from 'framer-motion';

const { Title, Text, Paragraph } = Typography;
const { TabPane } = Tabs;
const { Option } = Select;

// Ê®°ÊãüÂ≠¶‰π†Êï∞ÊçÆ
const mockLearningData = {
  currentStreak: 15,
  totalXP: 2850,
  level: 12,
  nextLevelXP: 3000,
  completedLessons: 45,
  totalLessons: 120,
  languages: [
    {
      code: 'ja',
      name: 'Êó•ËØ≠',
      flag: 'üáØüáµ',
      level: 'N3',
      progress: 75,
      xp: 1200,
      streak: 15,
      lessons: [
        { id: 1, title: 'Âü∫Á°ÄÈóÆÂÄôËØ≠', type: 'vocabulary', completed: true, xp: 50 },
        { id: 2, title: 'Êï∞Â≠ó‰∏éÊó∂Èó¥', type: 'grammar', completed: true, xp: 75 },
        { id: 3, title: 'Êó•Â∏∏ÂØπËØù', type: 'conversation', completed: false, xp: 100 },
        { id: 4, title: 'ÂèëÈü≥ÁªÉ‰π†', type: 'pronunciation', completed: false, xp: 60 }
      ]
    },
    {
      code: 'fr',
      name: 'Ê≥ïËØ≠',
      flag: 'üá´üá∑',
      level: 'A2',
      progress: 45,
      xp: 800,
      streak: 8,
      lessons: [
        { id: 5, title: 'Ê≥ïËØ≠Â≠óÊØç', type: 'vocabulary', completed: true, xp: 40 },
        { id: 6, title: 'Âä®ËØçÂèò‰Ωç', type: 'grammar', completed: false, xp: 80 },
        { id: 7, title: 'Ë¥≠Áâ©ÂØπËØù', type: 'conversation', completed: false, xp: 90 }
      ]
    }
  ]
};

const mockVocabulary = [
  { word: '„Åì„Çì„Å´„Å°„ÅØ', pronunciation: 'konnichiwa', meaning: '‰Ω†Â•Ω', language: 'ja', mastery: 90 },
  { word: '„ÅÇ„Çä„Åå„Å®„ÅÜ', pronunciation: 'arigatou', meaning: 'Ë∞¢Ë∞¢', language: 'ja', mastery: 85 },
  { word: '„Åô„Åø„Åæ„Åõ„Çì', pronunciation: 'sumimasen', meaning: 'ÂØπ‰∏çËµ∑', language: 'ja', mastery: 70 },
  { word: 'bonjour', pronunciation: 'bon-ZHOOR', meaning: '‰Ω†Â•Ω', language: 'fr', mastery: 80 },
  { word: 'merci', pronunciation: 'mer-SEE', meaning: 'Ë∞¢Ë∞¢', language: 'fr', mastery: 95 }
];

const mockCulturalContent = [
  {
    id: 1,
    title: 'Êó•Êú¨Ëå∂ÈÅìÊñáÂåñ‰ΩìÈ™å',
    author: 'ÊñáÂåñÂØºÂ∏àÂ∞èÁî∞',
    avatar: '/api/placeholder/40/40',
    type: 'experience',
    difficulty: '‰∏≠Á∫ß',
    duration: '45ÂàÜÈíü',
    participants: 128,
    rating: 4.8,
    description: 'Ê∑±ÂÖ•‰∫ÜËß£Êó•Êú¨Ëå∂ÈÅìÁöÑÂéÜÂè≤„ÄÅÂì≤Â≠¶ÂíåÂÆûË∑µÔºå‰ΩìÈ™åÊ≠£ÂÆóÁöÑËå∂ÈÅì‰ª™Âºè...',
    tags: ['Êó•Êú¨ÊñáÂåñ', 'Ëå∂ÈÅì', '‰º†ÁªüËâ∫ÊúØ'],
    image: '/api/placeholder/300/200',
    price: 50, // CBT
    enrolled: false
  },
  {
    id: 2,
    title: 'Ê≥ïÂõΩÊñôÁêÜÂà∂‰ΩúÂ∑•Âùä',
    author: 'Â∑¥Èªé‰∏ªÂé®Pierre',
    avatar: '/api/placeholder/40/40',
    type: 'workshop',
    difficulty: 'ÂàùÁ∫ß',
    duration: '90ÂàÜÈíü',
    participants: 89,
    rating: 4.9,
    description: 'Â≠¶‰π†Âà∂‰ΩúÁªèÂÖ∏Ê≥ïÂºèÁîúÁÇπÔºå‰∫ÜËß£Ê≥ïÂõΩÈ•ÆÈ£üÊñáÂåñÁöÑÁ≤æÈ´ì...',
    tags: ['Ê≥ïÂõΩÊñáÂåñ', 'ÊñôÁêÜ', 'ÁæéÈ£ü'],
    image: '/api/placeholder/300/200',
    price: 75, // CBT
    enrolled: true
  }
];

const LanguageLearning = () => {
  const [activeTab, setActiveTab] = useState('overview');
  const [selectedLanguage, setSelectedLanguage] = useState('ja');
  const [currentLesson, setCurrentLesson] = useState(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [showVocabularyModal, setShowVocabularyModal] = useState(false);
  const [selectedWord, setSelectedWord] = useState(null);

  // Âä®ÁîªÂèò‰Ωì
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: { staggerChildren: 0.1 }
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 }
  };

  // Ê∏≤ÊüìÂ≠¶‰π†Ê¶ÇËßà
  const renderOverview = () => (
    <motion.div variants={containerVariants} initial="hidden" animate="visible">
      <Row gutter={[24, 24]}>
        {/* Â≠¶‰π†ÁªüËÆ° */}
        <Col xs={24} lg={8}>
          <motion.div variants={itemVariants}>
            <Card className="stats-card">
              <Space direction="vertical" style={{ width: '100%' }} size="large">
                <div style={{ textAlign: 'center' }}>
                  <Avatar size={64} style={{ backgroundColor: '#1890ff' }}>
                    <FireOutlined style={{ fontSize: 32 }} />
                  </Avatar>
                  <Title level={4} style={{ margin: '12px 0 0' }}>
                    ËøûÁª≠Â≠¶‰π† {mockLearningData.currentStreak} Â§©
                  </Title>
                  <Text type="secondary">‰øùÊåÅÂ≠¶‰π†ÁÉ≠ÊÉÖÔºÅ</Text>
                </div>
                
                <Divider />
                
                <Row gutter={16}>
                  <Col span={12}>
                    <Statistic
                      title="ÊÄªÁªèÈ™åÂÄº"
                      value={mockLearningData.totalXP}
                      prefix={<StarOutlined />}
                      valueStyle={{ color: '#faad14' }}
                    />
                  </Col>
                  <Col span={12}>
                    <Statistic
                      title="ÂΩìÂâçÁ≠âÁ∫ß"
                      value={mockLearningData.level}
                      prefix={<TrophyOutlined />}
                      valueStyle={{ color: '#52c41a' }}
                    />
                  </Col>
                </Row>
                
                <div>
                  <Text strong>ÂçáÁ∫ßËøõÂ∫¶</Text>
                  <Progress
                    percent={(mockLearningData.totalXP / mockLearningData.nextLevelXP) * 100}
                    strokeColor={{
                      '0%': '#108ee9',
                      '100%': '#87d068',
                    }}
                    style={{ marginTop: 8 }}
                  />
                  <Text type="secondary" style={{ fontSize: 12 }}>
                    {mockLearningData.totalXP}/{mockLearningData.nextLevelXP} XP
                  </Text>
                </div>
              </Space>
            </Card>
          </motion.div>
        </Col>

        {/* ËØ≠Ë®ÄËøõÂ∫¶ */}
        <Col xs={24} lg={16}>
          <motion.div variants={itemVariants}>
            <Card title="Â≠¶‰π†ËøõÂ∫¶" className="language-progress-card">
              <Space direction="vertical" style={{ width: '100%' }} size="large">
                {mockLearningData.languages.map((lang, index) => (
                  <motion.div
                    key={lang.code}
                    whileHover={{ scale: 1.02 }}
                    style={{
                      padding: 16,
                      border: '1px solid #f0f0f0',
                      borderRadius: 12,
                      background: selectedLanguage === lang.code ? '#f6ffed' : 'white',
                      cursor: 'pointer'
                    }}
                    onClick={() => setSelectedLanguage(lang.code)}
                  >
                    <Row align="middle" gutter={16}>
                      <Col>
                        <div style={{ fontSize: 32 }}>{lang.flag}</div>
                      </Col>
                      <Col flex={1}>
                        <Row justify="space-between" align="middle">
                          <Col>
                            <Title level={5} style={{ margin: 0 }}>
                              {lang.name}
                            </Title>
                            <Space>
                              <Tag color="blue">{lang.level}</Tag>
                              <Text type="secondary">
                                <FireOutlined /> {lang.streak} Â§©ËøûÁª≠
                              </Text>
                            </Space>
                          </Col>
                          <Col>
                            <Text strong style={{ fontSize: 16, color: '#faad14' }}>
                              {lang.xp} XP
                            </Text>
                          </Col>
                        </Row>
                        <Progress
                          percent={lang.progress}
                          strokeColor="#52c41a"
                          style={{ marginTop: 8 }}
                        />
                      </Col>
                    </Row>
                  </motion.div>
                ))}
              </Space>
            </Card>
          </motion.div>
        </Col>
      </Row>
    </motion.div>
  );

  // Ê∏≤ÊüìËØæÁ®ãÂàóË°®
  const renderLessons = () => {
    const currentLang = mockLearningData.languages.find(lang => lang.code === selectedLanguage);
    
    return (
      <motion.div variants={containerVariants} initial="hidden" animate="visible">
        <Row gutter={[24, 24]}>
          <Col xs={24} lg={16}>
            <motion.div variants={itemVariants}>
              <Card 
                title={`${currentLang?.name} ËØæÁ®ã`}
                extra={
                  <Select value={selectedLanguage} onChange={setSelectedLanguage} style={{ width: 120 }}>
                    {mockLearningData.languages.map(lang => (
                      <Option key={lang.code} value={lang.code}>
                        {lang.flag} {lang.name}
                      </Option>
                    ))}
                  </Select>
                }
              >
                <List
                  dataSource={currentLang?.lessons || []}
                  renderItem={(lesson) => (
                    <motion.div
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <List.Item
                        style={{
                          padding: 16,
                          margin: '8px 0',
                          border: '1px solid #f0f0f0',
                          borderRadius: 12,
                          background: lesson.completed ? '#f6ffed' : 'white',
                          cursor: 'pointer'
                        }}
                        onClick={() => setCurrentLesson(lesson)}
                      >
                        <List.Item.Meta
                          avatar={
                            <Avatar
                              style={{
                                backgroundColor: lesson.completed ? '#52c41a' : '#1890ff'
                              }}
                              icon={
                                lesson.completed ? <CheckCircleOutlined /> : 
                                lesson.type === 'vocabulary' ? <BookOutlined /> :
                                lesson.type === 'grammar' ? <BookOutlined /> :
                                lesson.type === 'conversation' ? <MessageOutlined /> :
                                <SoundOutlined />
                              }
                            />
                          }
                          title={
                            <Space>
                              <Text strong>{lesson.title}</Text>
                              {lesson.completed && <CheckCircleOutlined style={{ color: '#52c41a' }} />}
                            </Space>
                          }
                          description={
                            <Space>
                              <Tag color={
                                lesson.type === 'vocabulary' ? 'blue' :
                                lesson.type === 'grammar' ? 'green' :
                                lesson.type === 'conversation' ? 'orange' : 'purple'
                              }>
                                {lesson.type === 'vocabulary' ? 'ËØçÊ±á' :
                                 lesson.type === 'grammar' ? 'ËØ≠Ê≥ï' :
                                 lesson.type === 'conversation' ? 'ÂØπËØù' : 'ÂèëÈü≥'}
                              </Tag>
                              <Text type="secondary">+{lesson.xp} XP</Text>
                            </Space>
                          }
                        />
                        <Button
                          type={lesson.completed ? "default" : "primary"}
                          icon={lesson.completed ? <ReloadOutlined /> : <PlayCircleOutlined />}
                        >
                          {lesson.completed ? 'Â§ç‰π†' : 'ÂºÄÂßã'}
                        </Button>
                      </List.Item>
                    </motion.div>
                  )}
                />
              </Card>
            </motion.div>
          </Col>

          <Col xs={24} lg={8}>
            <motion.div variants={itemVariants}>
              <Card title="‰ªäÊó•ÁõÆÊ†á" className="daily-goals-card">
                <Space direction="vertical" style={{ width: '100%' }} size="middle">
                  <div>
                    <Row justify="space-between">
                      <Text>ÂÆåÊàê 2 ‰∏™ËØæÁ®ã</Text>
                      <Text strong>1/2</Text>
                    </Row>
                    <Progress percent={50} strokeColor="#1890ff" />
                  </div>
                  
                  <div>
                    <Row justify="space-between">
                      <Text>Â≠¶‰π† 20 ‰∏™Êñ∞ÂçïËØç</Text>
                      <Text strong>15/20</Text>
                    </Row>
                    <Progress percent={75} strokeColor="#52c41a" />
                  </div>
                  
                  <div>
                    <Row justify="space-between">
                      <Text>ÁªÉ‰π†Âè£ËØ≠ 10 ÂàÜÈíü</Text>
                      <Text strong>6/10</Text>
                    </Row>
                    <Progress percent={60} strokeColor="#faad14" />
                  </div>
                </Space>
              </Card>
            </motion.div>

            <motion.div variants={itemVariants} style={{ marginTop: 24 }}>
              <Card title="ËØçÊ±áÂ§ç‰π†" extra={
                <Button size="small" onClick={() => setShowVocabularyModal(true)}>
                  Êü•ÁúãÂÖ®ÈÉ®
                </Button>
              }>
                <List
                  size="small"
                  dataSource={mockVocabulary.slice(0, 3)}
                  renderItem={(word) => (
                    <List.Item>
                      <List.Item.Meta
                        title={<Text strong>{word.word}</Text>}
                        description={
                          <div>
                            <Text type="secondary">{word.pronunciation}</Text>
                            <br />
                            <Text>{word.meaning}</Text>
                          </div>
                        }
                      />
                      <Progress
                        type="circle"
                        size={40}
                        percent={word.mastery}
                        strokeColor="#52c41a"
                        format={() => `${word.mastery}%`}
                      />
                    </List.Item>
                  )}
                />
              </Card>
            </motion.div>
          </Col>
        </Row>
      </motion.div>
    );
  };

  // Ê∏≤ÊüìÊñáÂåñ‰∫§ÊµÅ
  const renderCulturalExchange = () => (
    <motion.div variants={containerVariants} initial="hidden" animate="visible">
      <Row gutter={[24, 24]}>
        <Col span={24}>
          <motion.div variants={itemVariants}>
            <Alert
              message="ÊñáÂåñ‰∫§ÊµÅÊ¥ªÂä®"
              description="ÂèÇ‰∏éÊñáÂåñ‰∫§ÊµÅÊ¥ªÂä®Ôºå‰∏ç‰ªÖËÉΩÂ≠¶‰π†ËØ≠Ë®ÄÔºåËøòËÉΩÊ∑±ÂÖ•‰∫ÜËß£‰∏çÂêåÊñáÂåñÁöÑÁ≤æÈ´ìÔºåËé∑ÂæóCBTÂ•ñÂä±ÔºÅ"
              type="info"
              showIcon
              style={{ marginBottom: 24 }}
            />
          </motion.div>
        </Col>

        {mockCulturalContent.map((content, index) => (
          <Col xs={24} lg={12} key={content.id}>
            <motion.div variants={itemVariants}>
              <Card
                hoverable
                cover={
                  <div style={{ position: 'relative' }}>
                    <img
                      alt={content.title}
                      src={content.image}
                      style={{ height: 200, objectFit: 'cover', width: '100%' }}
                    />
                    <div style={{
                      position: 'absolute',
                      top: 12,
                      right: 12,
                      background: 'rgba(0,0,0,0.7)',
                      color: 'white',
                      padding: '4px 8px',
                      borderRadius: 4,
                      fontSize: 12
                    }}>
                      <ClockCircleOutlined /> {content.duration}
                    </div>
                  </div>
                }
                actions={[
                  <Tooltip title="ÁÇπËµû">
                    <HeartOutlined key="like" />
                  </Tooltip>,
                  <Tooltip title="ËØÑËÆ∫">
                    <MessageOutlined key="comment" />
                  </Tooltip>,
                  <Tooltip title="Êî∂Ëóè">
                    <StarOutlined key="star" />
                  </Tooltip>
                ]}
              >
                <Card.Meta
                  avatar={<Avatar src={content.avatar} />}
                  title={
                    <Space>
                      <Text strong>{content.title}</Text>
                      {content.enrolled && <Badge status="success" text="Â∑≤Êä•Âêç" />}
                    </Space>
                  }
                  description={
                    <Space direction="vertical" style={{ width: '100%' }}>
                      <Text type="secondary">by {content.author}</Text>
                      <Paragraph ellipsis={{ rows: 2 }}>
                        {content.description}
                      </Paragraph>
                      <div>
                        {content.tags.map(tag => (
                          <Tag key={tag} color="blue" size="small">
                            {tag}
                          </Tag>
                        ))}
                      </div>
                      <Row justify="space-between" align="middle">
                        <Col>
                          <Space>
                            <Rate disabled defaultValue={content.rating} allowHalf />
                            <Text type="secondary">({content.participants})</Text>
                          </Space>
                        </Col>
                        <Col>
                          <Space>
                            <Text strong style={{ color: '#faad14' }}>
                              {content.price} CBT
                            </Text>
                            <Button
                              type={content.enrolled ? "default" : "primary"}
                              size="small"
                            >
                              {content.enrolled ? 'Â∑≤Êä•Âêç' : 'Á´ãÂç≥Êä•Âêç'}
                            </Button>
                          </Space>
                        </Col>
                      </Row>
                    </Space>
                  }
                />
              </Card>
            </motion.div>
          </Col>
        ))}
      </Row>
    </motion.div>
  );

  return (
    <div className="language-learning-container">
      <Card style={{ margin: 24 }}>
        <Tabs activeKey={activeTab} onChange={setActiveTab} size="large">
          <TabPane
            tab={
              <span>
                <TrophyOutlined />
                Â≠¶‰π†Ê¶ÇËßà
              </span>
            }
            key="overview"
          >
            {renderOverview()}
          </TabPane>
          
          <TabPane
            tab={
              <span>
                <BookOutlined />
                ËØæÁ®ãÂ≠¶‰π†
              </span>
            }
            key="lessons"
          >
            {renderLessons()}
          </TabPane>
          
          <TabPane
            tab={
              <span>
                <SoundOutlined />
                Âè£ËØ≠ÁªÉ‰π†
              </span>
            }
            key="speaking"
          >
            <div style={{ textAlign: 'center', padding: 40 }}>
              <SoundOutlined style={{ fontSize: 64, color: '#1890ff' }} />
              <Title level={3}>Âè£ËØ≠ÁªÉ‰π†</Title>
              <Paragraph>
                ÈÄöËøáAIËØ≠Èü≥ËØÜÂà´ÊäÄÊúØÔºåÁªÉ‰π†ÂèëÈü≥ÂíåÂè£ËØ≠Ë°®ËææËÉΩÂäõ
              </Paragraph>
              <Button type="primary" size="large">
                ÂºÄÂßãÁªÉ‰π†
              </Button>
            </div>
          </TabPane>
          
          <TabPane
            tab={
              <span>
                <FireOutlined />
                ÊñáÂåñ‰∫§ÊµÅ
              </span>
            }
            key="cultural"
          >
            {renderCulturalExchange()}
          </TabPane>
        </Tabs>
      </Card>

      {/* ËØçÊ±áÂ§ç‰π†Ê®°ÊÄÅÊ°Ü */}
      <Modal
        title="ËØçÊ±áÂ§ç‰π†"
        open={showVocabularyModal}
        onCancel={() => setShowVocabularyModal(false)}
        footer={null}
        width={800}
      >
        <List
          dataSource={mockVocabulary}
          renderItem={(word) => (
            <List.Item
              actions={[
                <Button size="small" icon={<SoundOutlined />}>
                  ÂèëÈü≥
                </Button>,
                <Progress
                  type="circle"
                  size={40}
                  percent={word.mastery}
                  strokeColor="#52c41a"
                />
              ]}
            >
              <List.Item.Meta
                title={<Text strong style={{ fontSize: 18 }}>{word.word}</Text>}
                description={
                  <div>
                    <Text type="secondary" style={{ fontSize: 14 }}>
                      {word.pronunciation}
                    </Text>
                    <br />
                    <Text style={{ fontSize: 16 }}>{word.meaning}</Text>
                  </div>
                }
              />
            </List.Item>
          )}
        />
      </Modal>
    </div>
  );
};

export default LanguageLearning;

