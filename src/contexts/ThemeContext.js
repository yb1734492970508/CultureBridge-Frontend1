import React, { createContext, useContext, useState, useEffect } from 'react';

// ÊîØÊåÅÁöÑ‰∏ªÈ¢òÂàóË°®
export const SUPPORTED_THEMES = {
  light: {
    name: 'Light',
    displayName: 'ÊµÖËâ≤Ê®°Âºè',
    icon: '‚òÄÔ∏è',
    colors: {
      primary: '#6366f1',
      primaryHover: '#5855eb',
      secondary: '#f3f4f6',
      background: '#ffffff',
      surface: '#f9fafb',
      text: '#111827',
      textSecondary: '#6b7280',
      border: '#e5e7eb',
      success: '#10b981',
      warning: '#f59e0b',
      error: '#ef4444',
      info: '#3b82f6'
    }
  },
  dark: {
    name: 'Dark',
    displayName: 'Ê∑±Ëâ≤Ê®°Âºè',
    icon: 'üåô',
    colors: {
      primary: '#818cf8',
      primaryHover: '#6366f1',
      secondary: '#374151',
      background: '#111827',
      surface: '#1f2937',
      text: '#f9fafb',
      textSecondary: '#9ca3af',
      border: '#374151',
      success: '#34d399',
      warning: '#fbbf24',
      error: '#f87171',
      info: '#60a5fa'
    }
  },
  neon: {
    name: 'Neon',
    displayName: 'ÈúìËôπÊ®°Âºè',
    icon: '‚ö°',
    colors: {
      primary: '#00ffff',
      primaryHover: '#00e6e6',
      secondary: '#1a1a2e',
      background: '#0f0f23',
      surface: '#16213e',
      text: '#ffffff',
      textSecondary: '#a0a0a0',
      border: '#00ffff',
      success: '#00ff41',
      warning: '#ffff00',
      error: '#ff0080',
      info: '#0080ff'
    }
  },
  nature: {
    name: 'Nature',
    displayName: 'Ëá™ÁÑ∂Ê®°Âºè',
    icon: 'üåø',
    colors: {
      primary: '#059669',
      primaryHover: '#047857',
      secondary: '#f0fdf4',
      background: '#ffffff',
      surface: '#f7fee7',
      text: '#1f2937',
      textSecondary: '#6b7280',
      border: '#d1fae5',
      success: '#10b981',
      warning: '#f59e0b',
      error: '#ef4444',
      info: '#3b82f6'
    }
  },
  ocean: {
    name: 'Ocean',
    displayName: 'Êµ∑Ê¥ãÊ®°Âºè',
    icon: 'üåä',
    colors: {
      primary: '#0ea5e9',
      primaryHover: '#0284c7',
      secondary: '#f0f9ff',
      background: '#ffffff',
      surface: '#f0f9ff',
      text: '#1e293b',
      textSecondary: '#64748b',
      border: '#bae6fd',
      success: '#10b981',
      warning: '#f59e0b',
      error: '#ef4444',
      info: '#3b82f6'
    }
  }
};

// ÈªòËÆ§‰∏ªÈ¢ò
const DEFAULT_THEME = 'light';

// ‰∏ªÈ¢ò‰∏ä‰∏ãÊñá
const ThemeContext = createContext();

/**
 * ‰∏ªÈ¢òÊèê‰æõËÄÖÁªÑ‰ª∂
 */
export const ThemeProvider = ({ children }) => {
  const [currentTheme, setCurrentTheme] = useState(DEFAULT_THEME);
  const [systemPreference, setSystemPreference] = useState('light');
  const [autoMode, setAutoMode] = useState(false);

  // Ê£ÄÊµãÁ≥ªÁªü‰∏ªÈ¢òÂÅèÂ•Ω
  useEffect(() => {
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    
    const handleChange = (e) => {
      setSystemPreference(e.matches ? 'dark' : 'light');
    };

    // ÂàùÂßãËÆæÁΩÆ
    setSystemPreference(mediaQuery.matches ? 'dark' : 'light');
    
    // ÁõëÂê¨ÂèòÂåñ
    mediaQuery.addEventListener('change', handleChange);
    
    return () => {
      mediaQuery.removeEventListener('change', handleChange);
    };
  }, []);

  // ‰ªéÊú¨Âú∞Â≠òÂÇ®Âä†ËΩΩ‰∏ªÈ¢òËÆæÁΩÆ
  useEffect(() => {
    const savedTheme = localStorage.getItem('culturebridge_theme');
    const savedAutoMode = localStorage.getItem('culturebridge_auto_theme') === 'true';
    
    setAutoMode(savedAutoMode);
    
    if (savedAutoMode) {
      setCurrentTheme(systemPreference);
    } else if (savedTheme && SUPPORTED_THEMES[savedTheme]) {
      setCurrentTheme(savedTheme);
    }
  }, [systemPreference]);

  // Â∫îÁî®‰∏ªÈ¢òÂà∞DOM
  useEffect(() => {
    const theme = SUPPORTED_THEMES[currentTheme];
    if (!theme) return;

    const root = document.documentElement;
    
    // ËÆæÁΩÆCSSÂèòÈáè
    Object.entries(theme.colors).forEach(([key, value]) => {
      root.style.setProperty(`--color-${key}`, value);
    });

    // ËÆæÁΩÆ‰∏ªÈ¢òÁ±ªÂêç
    root.className = root.className.replace(/theme-\w+/g, '');
    root.classList.add(`theme-${currentTheme}`);

    // ËÆæÁΩÆmeta theme-color
    const metaThemeColor = document.querySelector('meta[name="theme-color"]');
    if (metaThemeColor) {
      metaThemeColor.setAttribute('content', theme.colors.primary);
    }
  }, [currentTheme]);

  // ÂàáÊç¢‰∏ªÈ¢ò
  const changeTheme = (themeName) => {
    if (!SUPPORTED_THEMES[themeName]) {
      console.error(`‰∏çÊîØÊåÅÁöÑ‰∏ªÈ¢ò: ${themeName}`);
      return;
    }

    setCurrentTheme(themeName);
    setAutoMode(false);
    localStorage.setItem('culturebridge_theme', themeName);
    localStorage.setItem('culturebridge_auto_theme', 'false');
  };

  // ÂàáÊç¢Ëá™Âä®Ê®°Âºè
  const toggleAutoMode = () => {
    const newAutoMode = !autoMode;
    setAutoMode(newAutoMode);
    localStorage.setItem('culturebridge_auto_theme', newAutoMode.toString());
    
    if (newAutoMode) {
      setCurrentTheme(systemPreference);
    }
  };

  // ÂàáÊç¢Ê∑±Ëâ≤/ÊµÖËâ≤Ê®°Âºè
  const toggleDarkMode = () => {
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    changeTheme(newTheme);
  };

  // Ëé∑ÂèñÂΩìÂâç‰∏ªÈ¢ò‰ø°ÊÅØ
  const getCurrentThemeInfo = () => {
    return SUPPORTED_THEMES[currentTheme];
  };

  // Ê£ÄÊü•ÊòØÂê¶‰∏∫Ê∑±Ëâ≤‰∏ªÈ¢ò
  const isDarkTheme = () => {
    return ['dark', 'neon'].includes(currentTheme);
  };

  // Ëé∑ÂèñËÆ°ÁÆóÂêéÁöÑÈ¢úËâ≤ÂÄº
  const getColor = (colorName) => {
    const theme = SUPPORTED_THEMES[currentTheme];
    return theme?.colors[colorName] || '';
  };

  const value = {
    currentTheme,
    supportedThemes: SUPPORTED_THEMES,
    systemPreference,
    autoMode,
    changeTheme,
    toggleAutoMode,
    toggleDarkMode,
    getCurrentThemeInfo,
    isDarkTheme,
    getColor
  };

  return (
    <ThemeContext.Provider value={value}>
      {children}
    </ThemeContext.Provider>
  );
};

/**
 * ‰ΩøÁî®‰∏ªÈ¢òÁöÑHook
 */
export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};

/**
 * ‰∏ªÈ¢òÈÄâÊã©Âô®ÁªÑ‰ª∂
 */
export const ThemeSelector = ({ className = "" }) => {
  const { 
    currentTheme, 
    supportedThemes, 
    autoMode, 
    changeTheme, 
    toggleAutoMode 
  } = useTheme();
  const [showDropdown, setShowDropdown] = useState(false);

  return (
    <div className={`theme-selector ${className}`}>
      <button
        className="theme-button"
        onClick={() => setShowDropdown(!showDropdown)}
      >
        <span className="theme-icon">
          {supportedThemes[currentTheme]?.icon}
        </span>
        <span className="theme-name">
          {supportedThemes[currentTheme]?.displayName}
        </span>
        <span className="dropdown-arrow">
          {showDropdown ? '‚ñ≤' : '‚ñº'}
        </span>
      </button>

      {showDropdown && (
        <div className="theme-dropdown">
          <div className="theme-section">
            <div className="theme-section-title">‰∏ªÈ¢òÈÄâÊã©</div>
            {Object.entries(supportedThemes).map(([key, theme]) => (
              <button
                key={key}
                className={`theme-option ${key === currentTheme ? 'active' : ''}`}
                onClick={() => {
                  changeTheme(key);
                  setShowDropdown(false);
                }}
              >
                <span className="option-icon">{theme.icon}</span>
                <span className="option-name">{theme.displayName}</span>
                {key === currentTheme && !autoMode && (
                  <span className="option-check">‚úì</span>
                )}
              </button>
            ))}
          </div>

          <div className="theme-divider" />

          <div className="theme-section">
            <button
              className={`theme-option auto-mode ${autoMode ? 'active' : ''}`}
              onClick={() => {
                toggleAutoMode();
                setShowDropdown(false);
              }}
            >
              <span className="option-icon">üîÑ</span>
              <span className="option-name">Ë∑üÈöèÁ≥ªÁªü</span>
              {autoMode && (
                <span className="option-check">‚úì</span>
              )}
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

/**
 * Âø´ÈÄü‰∏ªÈ¢òÂàáÊç¢ÊåâÈíÆ
 */
export const ThemeToggle = ({ className = "" }) => {
  const { isDarkTheme, toggleDarkMode } = useTheme();

  return (
    <button
      className={`theme-toggle ${className}`}
      onClick={toggleDarkMode}
      title={isDarkTheme() ? 'ÂàáÊç¢Âà∞ÊµÖËâ≤Ê®°Âºè' : 'ÂàáÊç¢Âà∞Ê∑±Ëâ≤Ê®°Âºè'}
    >
      <span className="toggle-icon">
        {isDarkTheme() ? '‚òÄÔ∏è' : 'üåô'}
      </span>
    </button>
  );
};

export default ThemeProvider;

